
#region ================== Copyright (c) 2007 Pascal vd Heiden

/*
 * Copyright (c) 2007 Pascal vd Heiden, www.codeimp.com
 * This program is released under GNU General Public License
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 */

#endregion

#region ================== Namespaces

using System.IO;
using CodeImp.DoomBuilder.Rendering;

#endregion

namespace CodeImp.DoomBuilder.Data
{
	public sealed class Playpal
	{
		#region ================== Constants

		// Meridian 59's 256 color palette. If we're editing a M59 room,
		// return colors from this instead of whatever palette we have loaded.
		private readonly byte[,] m59palette = new byte[256, 4]
			{ {0, 0, 0, 255}, {128, 0, 0, 255}, {0, 128, 0, 255}, {128, 128, 0, 255},
			{0, 0, 128, 255}, {128, 0, 128, 255}, {0, 128, 128, 255}, {192, 192, 192, 255},
			{128, 0, 0, 255}, {0, 128, 0, 255}, {128, 0, 0, 255}, {0, 128, 0, 255},
			{128, 0, 0, 255}, {0, 128, 0, 255}, {128, 0, 0, 255}, {0, 128, 0, 255},
			{194, 1, 1, 255}, {180, 1, 1, 255}, {171, 2, 2, 255}, {166, 1, 1, 255},
			{154, 2, 2, 255}, {145, 2, 0, 255}, {137, 2, 0, 255}, {127, 0, 0, 255},
			{120, 2, 0, 255}, {109, 1, 0, 255}, {86, 0, 0, 255}, {76, 0, 0, 255},
			{64, 0, 0, 255}, {56, 0, 0, 255}, {38, 0, 0, 255}, {17, 0, 0, 255},
			{254, 194, 148, 255}, {235, 184, 146, 255}, {219, 169, 131, 255},
			{203, 157, 124, 255}, {198, 148, 117, 255}, {181, 135, 105, 255},
			{177, 136, 102, 255}, {168, 128, 96, 255}, {157, 115, 86, 255},
			{145, 107, 81, 255}, {136, 96, 72, 255}, {122, 88, 68, 255}, {117, 84, 64, 255},
			{104, 77, 59, 255}, {96, 70, 49, 255}, {74, 59, 45, 255}, {255, 181, 128, 255},
			{243, 168, 114, 255}, {220, 153, 104, 255}, {202, 141, 97, 255},
			{196, 130, 87, 255}, {185, 122, 81, 255}, {171, 115, 71, 255},
			{165, 110, 68, 255}, {147, 92, 54, 255}, {133, 82, 49, 255}, {123, 70, 38, 255},
			{107, 61, 34, 255}, {99, 56, 28, 255}, {85, 47, 24, 255}, {75, 40, 13, 255},
			{50, 28, 11, 255}, {185, 95, 43, 255}, {145, 70, 26, 255}, {131, 63, 24, 255},
			{121, 59, 22, 255}, {119, 52, 18, 255}, {114, 47, 16, 255}, {105, 48, 12, 255},
			{102, 45, 12, 255}, {94, 37, 12, 255}, {84, 34, 12, 255}, {75, 27, 11, 255},
			{65, 25, 11, 255}, {60, 23, 11, 255}, {51, 20, 11, 255}, {42, 20, 11, 255},
			{27, 15, 10, 255}, {255, 178, 51, 255}, {255, 169, 27, 255}, {255, 165, 17, 255},
			{250, 156, 0, 255}, {238, 148, 0, 255}, {216, 135, 0, 255}, {204, 127, 0, 255},
			{194, 121, 0, 255}, {170, 106, 0, 255}, {160, 100, 0, 255}, {136, 85, 0, 255},
			{126, 79, 0, 255}, {104, 65, 0, 255}, {92, 57, 0, 255}, {68, 42, 0, 255},
			{48, 30, 0, 255}, {137, 177, 116, 255}, {130, 169, 110, 255}, {120, 161, 100, 255},
			{112, 149, 92, 255}, {103, 139, 83, 255}, {95, 129, 76, 255}, {88, 124, 73, 255},
			{80, 112, 66, 255}, {71, 101, 55, 255}, {62, 90, 49, 255}, {48, 79, 38, 255},
			{41, 68, 31, 255}, {37, 62, 22, 255}, {28, 48, 16, 255}, {16, 30, 8, 255},
			{7, 14, 3, 255}, {0, 196, 50, 255}, {0, 184, 47, 255}, {0, 170, 43, 255},
			{0, 158, 39, 255}, {0, 154, 39, 255}, {0, 140, 36, 255}, {0, 138, 35, 255},
			{0, 126, 32, 255}, {0, 114, 29, 255}, {0, 98, 25, 255}, {0, 80, 20, 255},
			{0, 69, 17, 255}, {0, 62, 16, 255}, {0, 48, 12, 255}, {0, 26, 7, 255},
			{0, 14, 4, 255}, {171, 213, 222, 255}, {165, 206, 215, 255}, {137, 188, 197, 255},
			{127, 172, 179, 255}, {112, 154, 163, 255}, {106, 145, 154, 255}, {78, 129, 137, 255},
			{72, 117, 125, 255}, {52, 95, 103, 255}, {46, 85, 93, 255}, {27, 70, 78, 255},
			{23, 61, 70, 255}, {10, 52, 61, 255}, {6, 41, 48, 255}, {3, 27, 33, 255},
			{0, 9, 11, 255}, {52, 78, 222, 255}, {50, 74, 211, 255}, {43, 62, 199, 255},
			{42, 58, 188, 255}, {36, 52, 171, 255}, {34, 48, 161, 255}, {27, 44, 146, 255},
			{23, 38, 132, 255}, {10, 27, 120, 255}, {8, 24, 107, 255}, {2, 18, 86, 255},
			{1, 15, 75, 255}, {0, 10, 70, 255}, {0, 7, 59, 255}, {0, 3, 41, 255},
			{0, 0, 24, 255}, {160, 66, 194, 255}, {153, 63, 185, 255}, {148, 56, 178, 255},
			{134, 46, 162, 255}, {122, 44, 161, 255}, {110, 40, 147, 255}, {102, 36, 139, 255},
			{94, 32, 129, 255}, {86, 24, 111, 255}, {78, 18, 99, 255}, {63, 3, 85, 255},
			{54, 0, 76, 255}, {45, 0, 62, 255}, {33, 0, 47, 255}, {23, 0, 32, 255},
			{10, 0, 16, 255}, {244, 240, 206, 255}, {237, 231, 176, 255}, {235, 228, 163, 255},
			{229, 220, 137, 255}, {216, 215, 246, 255}, {187, 186, 240, 255}, {175, 173, 237, 255},
			{148, 145, 231, 255}, {156, 233, 156, 255}, {132, 228, 132, 255}, {90, 215, 90, 255},
			{40, 184, 40, 255}, {242, 197, 197, 255}, {232, 152, 152, 255}, {225, 119, 119, 255},
			{220, 98, 98, 255}, {255, 234, 110, 255}, {250, 222, 55, 255}, {247, 213, 27, 255},
			{240, 208, 25, 255}, {238, 202, 26, 255}, {222, 189, 25, 255}, {220, 196, 19, 255},
			{207, 185, 16, 255}, {197, 180, 10, 255}, {185, 167, 8, 255}, {154, 137, 2, 255},
			{135, 122, 0, 255}, {128, 115, 0, 255}, {119, 113, 0, 255}, {112, 106, 0, 255},
			{85, 81, 0, 255}, {231, 231, 231, 255}, {213, 213, 213, 255}, {205, 205, 205, 255},
			{188, 188, 188, 255}, {180, 180, 180, 255}, {163, 163, 163, 255}, {154, 154, 154, 255},
			{146, 146, 146, 255}, {129, 129, 129, 255}, {120, 120, 120, 255}, {103, 103, 103, 255},
			{95, 95, 95, 255}, {78, 78, 78, 255}, {70, 70, 70, 255}, {52, 52, 52, 255},
			{36, 36, 36, 255}, {124, 191, 255, 255}, {103, 171, 239, 255}, {95, 163, 231, 255},
			{95, 154, 213, 255}, {78, 137, 197, 255}, {70, 120, 171, 255}, {61, 112, 163, 255},
			{60, 107, 154, 255}, {52, 95, 137, 255}, {44, 82, 119, 255}, {27, 65, 103, 255},
			{17, 47, 77, 255}, {10, 36, 61, 255}, {5, 24, 43, 255}, {1, 14, 27, 255},
			{0, 11, 22, 255}, {224, 180, 148, 255}, {208, 176, 132, 255}, {204, 168, 124, 255},
			{196, 160, 116, 255}, {128, 0, 0, 255}, {0, 128, 0, 255}, {128, 0, 0, 255},
			{0, 128, 0, 255}, {128, 128, 128, 255}, {255, 0, 0, 255}, {0, 255, 0, 255},
			{255, 255, 0, 255}, {0, 0, 255, 255}, {255, 0, 255, 255}, {0, 255, 255, 255},
			{255, 255, 255, 255} };

		#endregion

		#region ================== Variables

		private PixelColor[] colors;
		private PixelColor[] m59colors;

		#endregion

		#region ================== Properties

		public PixelColor this[int index] { get { return General.Map.MERIDIAN ? m59colors[index] : colors[index]; } }

		#endregion

		#region ================== Constructor / Disposer

		// Constructor
		public Playpal()
		{
			// Create array
			colors = new PixelColor[256];
			m59colors = new PixelColor[256];

			// Set all palette entries
			for(int i = 0; i < 256; i++)
			{
				// Set colors to gray
				colors[i].r = 127;
				colors[i].g = 127;
				colors[i].b = 127;
				colors[i].a = 255;

				// Set m59 pixel colors.
				m59colors[i].r = m59palette[i, 0];
				m59colors[i].g = m59palette[i, 1];
				m59colors[i].b = m59palette[i, 2];
				m59colors[i].a = m59palette[i, 3];
			}
		}

		// Constructor
		public Playpal(Stream stream)
		{
			BinaryReader reader = new BinaryReader(stream);
			
			// Create array
			colors = new PixelColor[256];

			// Read all palette entries
			stream.Seek(0, SeekOrigin.Begin);
			for(int i = 0; i < 256; i++)
			{
				// Read colors
				colors[i].r = reader.ReadByte();
				colors[i].g = reader.ReadByte();
				colors[i].b = reader.ReadByte();
				colors[i].a = 255;
			}
		}

		#endregion

		#region ================== Methods

		#endregion
	}
}
